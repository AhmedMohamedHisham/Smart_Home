
Smart Home Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab0  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bb  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b3  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000364  00000000  00000000  0000229d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 39 00 	call	0x72	; 0x72 <main>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SMART_ROOM_APP_Start>:
#include "SMART_ROOM_APP.h"
#include "SERVICES.h"

void SMART_ROOM_APP_Start(void)
{
	SMART_ROOM_APP_Init();
  6c:	0e 94 17 01 	call	0x22e	; 0x22e <SMART_ROOM_APP_Init>
  70:	ff cf       	rjmp	.-2      	; 0x70 <SMART_ROOM_APP_Start+0x4>

00000072 <main>:
#include "SMART_ROOM_APP.h"


int main(void)
{
	SMART_ROOM_APP_Start();
  72:	0e 94 36 00 	call	0x6c	; 0x6c <SMART_ROOM_APP_Start>
}
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	08 95       	ret

0000007c <set_dir>:
 */ 
#include "DIO.h"

void set_dir (uint8_t port , uint8_t pin , uint8_t dir)
{
	switch (dir)
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <set_dir+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	c9 f1       	breq	.+114    	; 0xf6 <set_dir+0x7a>
  84:	08 95       	ret
	{
		case INPUT:
		switch(port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <set_dir+0x32>
  8a:	28 f0       	brcs	.+10     	; 0x96 <set_dir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <set_dir+0x4a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <set_dir+0x62>
  94:	08 95       	ret
		{
			case PORT_A:
			clr_bit(DDRA, pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <set_dir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <set_dir+0x22>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
			break;
  ac:	08 95       	ret
			case PORT_B:
			clr_bit(DDRB, pin);
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <set_dir+0x3e>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <set_dir+0x3a>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	87 bb       	out	0x17, r24	; 23
			break;
  c4:	08 95       	ret
			case PORT_C:
			clr_bit(DDRC, pin);
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <set_dir+0x56>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <set_dir+0x52>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
			break;
  dc:	08 95       	ret
			case PORT_D:
			clr_bit(DDRD, pin);
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <set_dir+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <set_dir+0x6a>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	81 bb       	out	0x11, r24	; 17
			break;
  f4:	08 95       	ret
		}
		break;
		case OUTPUT:
		switch(port)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f0       	breq	.+34     	; 0x11c <set_dir+0xa0>
  fa:	28 f0       	brcs	.+10     	; 0x106 <set_dir+0x8a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	c9 f0       	breq	.+50     	; 0x132 <set_dir+0xb6>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	11 f1       	breq	.+68     	; 0x148 <set_dir+0xcc>
 104:	08 95       	ret
		{
			case PORT_A:
			set_bit (DDRA , pin);
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <set_dir+0x96>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <set_dir+0x92>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
			break;
 11a:	08 95       	ret
			case PORT_B:
			set_bit (DDRB , pin);
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <set_dir+0xac>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <set_dir+0xa8>
 12c:	82 2b       	or	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
			break;
 130:	08 95       	ret
			case PORT_C:
			set_bit (DDRC , pin);
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <set_dir+0xc2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <set_dir+0xbe>
 142:	82 2b       	or	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
			break;
 146:	08 95       	ret
			case PORT_D:
			set_bit (DDRD , pin);
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <set_dir+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <set_dir+0xd4>
 158:	82 2b       	or	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <SPI_M_Init>:
void SPI_M_Init(void)
{
	#if SPI_MODE == MASTER
		//PIN Directions
		// set CS pin as output
		set_dir(CS_PORT , CS_PIN , OUTPUT);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <set_dir>
		// set MOSI pin as output
		set_dir(MOSI_PORT , MOSI_PIN , OUTPUT);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	65 e0       	ldi	r22, 0x05	; 5
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 3e 00 	call	0x7c	; 0x7c <set_dir>
		// set MISO pin as input
		set_dir(MISO_PORT , MISO_PIN , INPUT);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	66 e0       	ldi	r22, 0x06	; 6
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 3e 00 	call	0x7c	; 0x7c <set_dir>
		// set SCK pin as output
		set_dir(SCK_PORT , SCK_PIN , OUTPUT);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	67 e0       	ldi	r22, 0x07	; 7
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 3e 00 	call	0x7c	; 0x7c <set_dir>

		//SPI Clock Rate (F_CPU/128)
		set_bit(SPCR , SPR1);
 186:	8d b1       	in	r24, 0x0d	; 13
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	8d b9       	out	0x0d, r24	; 13
		set_bit(SPCR , SPR0);
 18c:	8d b1       	in	r24, 0x0d	; 13
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	8d b9       	out	0x0d, r24	; 13
		//SPI Mode 0
		//Clock Phase (Leading Edge: Sample & Trailing Edge: Setup)
		clr_bit(SPCR , CPHA);
 192:	8d b1       	in	r24, 0x0d	; 13
 194:	8b 7f       	andi	r24, 0xFB	; 251
 196:	8d b9       	out	0x0d, r24	; 13
		//Clock Polarity (Leading Edge: Rising & Trailing Edge: Falling)
		clr_bit(SPCR , CPOL);
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	87 7f       	andi	r24, 0xF7	; 247
 19c:	8d b9       	out	0x0d, r24	; 13
		//Master Select
		set_bit(SPCR , MSTR);
 19e:	8d b1       	in	r24, 0x0d	; 13
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	8d b9       	out	0x0d, r24	; 13
		//Data Order (LSB of the data word is transmitted first)
		set_bit(SPCR , DORD);
 1a4:	8d b1       	in	r24, 0x0d	; 13
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	8d b9       	out	0x0d, r24	; 13
		//SPI Enable
		set_bit(SPCR , SPE);
 1aa:	8d b1       	in	r24, 0x0d	; 13
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	8d b9       	out	0x0d, r24	; 13
 1b0:	08 95       	ret

000001b2 <SPI_Send>:
	#endif
}

void SPI_Send(uint8_t data)
{
	SPDR = data;
 1b2:	8f b9       	out	0x0f, r24	; 15
	while ( !get_bit(SPSR , SPIF) );
 1b4:	77 9b       	sbis	0x0e, 7	; 14
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <SPI_Send+0x2>
 1b8:	08 95       	ret

000001ba <UART_Init>:
#include "SPI.h"

void UART_Init(void)
{
	//Normal Asynchronous Speed
	clr_bit(UCSRA , U2X);
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	8b b9       	out	0x0b, r24	; 11
	//Disable Multi-processor Communication Mode
	clr_bit(UCSRA , MPCM);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	8b b9       	out	0x0b, r24	; 11
	
	//RX Complete Interrupt Enable
	set_bit(UCSRB , RXCIE);
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8a b9       	out	0x0a, r24	; 10
	//Receiver Enable
	set_bit(UCSRB , RXEN);
 1cc:	8a b1       	in	r24, 0x0a	; 10
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	8a b9       	out	0x0a, r24	; 10
	Asynchronous Operation Mode
	Parity Mode Disabled
	Stop Bit (1-bit)
	Character Size (8-bit)
*/
	UCSRC |= (1<< URSEL) | (1<< UCSZ0) | (1<< UCSZ1);
 1d2:	80 b5       	in	r24, 0x20	; 32
 1d4:	86 68       	ori	r24, 0x86	; 134
 1d6:	80 bd       	out	0x20, r24	; 32
	
	//Baud Rate (9600)
	UBRRL = 103;
 1d8:	87 e6       	ldi	r24, 0x67	; 103
 1da:	89 b9       	out	0x09, r24	; 9
	
	//Enable Global Interrupt
	set_bit(SREG , 7);
 1dc:	8f b7       	in	r24, 0x3f	; 63
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	8f bf       	out	0x3f, r24	; 63
 1e2:	08 95       	ret

000001e4 <__vector_13>:
}

ISR (USART_RXC_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	SPI_Send(UDR);
 206:	8c b1       	in	r24, 0x0c	; 12
 208:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Send>
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <SMART_ROOM_APP_Init>:
#include "SPI.h"
#include "UART.h"

void SMART_ROOM_APP_Init(void)
{
	UART_Init();
 22e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <UART_Init>
	SPI_M_Init();
 232:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_M_Init>
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
