
Smart Home Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e10  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088a  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000785  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038d  00000000  00000000  000029c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_12>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SMART_ROOM_APP_Start>:
#include "SMART_ROOM_APP.h"
#include "SERVICES.h"

void SMART_ROOM_APP_Start(void)
{
	SMART_ROOM_APP_Init();
  6c:	0e 94 9e 01 	call	0x33c	; 0x33c <SMART_ROOM_APP_Init>
  70:	ff cf       	rjmp	.-2      	; 0x70 <SMART_ROOM_APP_Start+0x4>

00000072 <LED_0_Init>:
	set_dir (LED_0_PORT , LED_0_PIN , OUTPUT);
}

void LED_0_ON(void)
{
	set(LED_0_PORT , LED_0_PIN);
  72:	41 e0       	ldi	r20, 0x01	; 1
  74:	62 e0       	ldi	r22, 0x02	; 2
  76:	82 e0       	ldi	r24, 0x02	; 2
  78:	0e 94 5e 00 	call	0xbc	; 0xbc <set_dir>
  7c:	08 95       	ret

0000007e <LED_0_OFF>:
}

void LED_0_OFF(void)
{
	clr(LED_0_PORT , LED_0_PIN);
  7e:	62 e0       	ldi	r22, 0x02	; 2
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	0e 94 cf 00 	call	0x19e	; 0x19e <clr>
  86:	08 95       	ret

00000088 <LED_0_TGL>:
}

void LED_0_TGL(void)
{
	tgl(LED_0_PORT , LED_0_PIN);
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	0e 94 07 01 	call	0x20e	; 0x20e <tgl>
  90:	08 95       	ret

00000092 <LED_2_Init>:
	set_dir (LED_2_PORT , LED_2_PIN , OUTPUT);
}

void LED_2_ON(void)
{
	set(LED_2_PORT , LED_2_PIN);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 5e 00 	call	0xbc	; 0xbc <set_dir>
  9c:	08 95       	ret

0000009e <LED_2_OFF>:
}

void LED_2_OFF(void)
{
	clr(LED_2_PORT , LED_2_PIN);
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 cf 00 	call	0x19e	; 0x19e <clr>
  a6:	08 95       	ret

000000a8 <LED_2_TGL>:
}

void LED_2_TGL(void)
{
	tgl(LED_2_PORT , LED_2_PIN);
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 07 01 	call	0x20e	; 0x20e <tgl>
  b0:	08 95       	ret

000000b2 <main>:
 */ 

#include "SMART_ROOM_APP.h"
int main(void)
{
	SMART_ROOM_APP_Start();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <SMART_ROOM_APP_Start>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <set_dir>:
		break;
		case PORT_C:
		set_bit (PORTC , pin);
		break;
		case PORT_D:
		set_bit (PORTD , pin);
  bc:	44 23       	and	r20, r20
  be:	19 f0       	breq	.+6      	; 0xc6 <set_dir+0xa>
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	c9 f1       	breq	.+114    	; 0x136 <set_dir+0x7a>
  c4:	08 95       	ret
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 f0       	breq	.+36     	; 0xee <set_dir+0x32>
  ca:	28 f0       	brcs	.+10     	; 0xd6 <set_dir+0x1a>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	d9 f0       	breq	.+54     	; 0x106 <set_dir+0x4a>
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	29 f1       	breq	.+74     	; 0x11e <set_dir+0x62>
  d4:	08 95       	ret
  d6:	2a b3       	in	r18, 0x1a	; 26
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <set_dir+0x26>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <set_dir+0x22>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	8a bb       	out	0x1a, r24	; 26
  ec:	08 95       	ret
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <set_dir+0x3e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <set_dir+0x3a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	87 bb       	out	0x17, r24	; 23
 104:	08 95       	ret
 106:	24 b3       	in	r18, 0x14	; 20
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <set_dir+0x56>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <set_dir+0x52>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <set_dir+0x6e>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <set_dir+0x6a>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	81 bb       	out	0x11, r24	; 17
 134:	08 95       	ret
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	89 f0       	breq	.+34     	; 0x15c <set_dir+0xa0>
 13a:	28 f0       	brcs	.+10     	; 0x146 <set_dir+0x8a>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	c9 f0       	breq	.+50     	; 0x172 <set_dir+0xb6>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	11 f1       	breq	.+68     	; 0x188 <set_dir+0xcc>
 144:	08 95       	ret
 146:	2a b3       	in	r18, 0x1a	; 26
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <set_dir+0x96>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <set_dir+0x92>
 156:	82 2b       	or	r24, r18
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	08 95       	ret
 15c:	27 b3       	in	r18, 0x17	; 23
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <set_dir+0xac>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <set_dir+0xa8>
 16c:	82 2b       	or	r24, r18
 16e:	87 bb       	out	0x17, r24	; 23
 170:	08 95       	ret
 172:	24 b3       	in	r18, 0x14	; 20
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <set_dir+0xc2>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <set_dir+0xbe>
 182:	82 2b       	or	r24, r18
 184:	84 bb       	out	0x14, r24	; 20
 186:	08 95       	ret
 188:	21 b3       	in	r18, 0x11	; 17
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <set_dir+0xd8>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <set_dir+0xd4>
 198:	82 2b       	or	r24, r18
 19a:	81 bb       	out	0x11, r24	; 17
 19c:	08 95       	ret

0000019e <clr>:
	}
}

void clr (uint8_t port , uint8_t pin)
{
	switch(port)
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 f0       	breq	.+36     	; 0x1c6 <clr+0x28>
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <clr+0x10>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	d9 f0       	breq	.+54     	; 0x1de <clr+0x40>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	29 f1       	breq	.+74     	; 0x1f6 <clr+0x58>
 1ac:	08 95       	ret
	{
		case PORT_A:
		clr_bit (PORTA , pin);
 1ae:	2b b3       	in	r18, 0x1b	; 27
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <clr+0x1c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <clr+0x18>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	8b bb       	out	0x1b, r24	; 27
		break;
 1c4:	08 95       	ret
		case PORT_B:
		clr_bit (PORTB , pin);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <clr+0x34>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <clr+0x30>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
		break;
 1dc:	08 95       	ret
		case PORT_C:
		clr_bit (PORTC , pin);
 1de:	25 b3       	in	r18, 0x15	; 21
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <clr+0x4c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <clr+0x48>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	85 bb       	out	0x15, r24	; 21
		break;
 1f4:	08 95       	ret
		case PORT_D:
		clr_bit (PORTD , pin);
 1f6:	22 b3       	in	r18, 0x12	; 18
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <clr+0x64>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <clr+0x60>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	08 95       	ret

0000020e <tgl>:
	}
}

void tgl (uint8_t port , uint8_t pin)
{
	switch(port)
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	89 f0       	breq	.+34     	; 0x234 <tgl+0x26>
 212:	28 f0       	brcs	.+10     	; 0x21e <tgl+0x10>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	c9 f0       	breq	.+50     	; 0x24a <tgl+0x3c>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	11 f1       	breq	.+68     	; 0x260 <tgl+0x52>
 21c:	08 95       	ret
	{
		case PORT_A:
		tgl_bit (PORTA , pin);
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <tgl+0x1c>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <tgl+0x18>
 22e:	82 27       	eor	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
		break;
 232:	08 95       	ret
		case PORT_B:
		tgl_bit (PORTB , pin);
 234:	28 b3       	in	r18, 0x18	; 24
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <tgl+0x32>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <tgl+0x2e>
 244:	82 27       	eor	r24, r18
 246:	88 bb       	out	0x18, r24	; 24
		break;
 248:	08 95       	ret
		case PORT_C:
		tgl_bit (PORTC , pin);
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <tgl+0x48>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <tgl+0x44>
 25a:	82 27       	eor	r24, r18
 25c:	85 bb       	out	0x15, r24	; 21
		break;
 25e:	08 95       	ret
		case PORT_D:
		tgl_bit (PORTD , pin);
 260:	22 b3       	in	r18, 0x12	; 18
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <tgl+0x5e>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <tgl+0x5a>
 270:	82 27       	eor	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
 274:	08 95       	ret

00000276 <SPI_S_Init>:
	//SPI Enable
	set_bit(SPCR , SPE);
	#elif SPI_MODE == SLAVE
	//PIN Directions
	// set SS pin as input
	set_dir(CS_PORT , CS_PIN , INPUT);
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 5e 00 	call	0xbc	; 0xbc <set_dir>
	// set MOSI pin as input
	set_dir(MOSI_PORT , MOSI_PIN , INPUT);
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 5e 00 	call	0xbc	; 0xbc <set_dir>
	// set MISO pin as output
	set_dir(MISO_PORT , MISO_PIN , OUTPUT);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 5e 00 	call	0xbc	; 0xbc <set_dir>
	// set SCK pin as input
	set_dir(SCK_PORT , SCK_PIN , INPUT);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	67 e0       	ldi	r22, 0x07	; 7
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 5e 00 	call	0xbc	; 0xbc <set_dir>
	
	//Enable Global Interrupt
	set_bit(SREG , 7);
 29e:	8f b7       	in	r24, 0x3f	; 63
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	8f bf       	out	0x3f, r24	; 63
	
	//SPI Clock Rate (F_CPU/128)
	set_bit(SPCR , SPR1);
 2a4:	8d b1       	in	r24, 0x0d	; 13
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR , SPR0);
 2aa:	8d b1       	in	r24, 0x0d	; 13
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	8d b9       	out	0x0d, r24	; 13
	//SPI Mode 0
	//Clock Phase (Leading Edge: Sample & Trailing Edge: Setup)
	clr_bit(SPCR , CPHA);
 2b0:	8d b1       	in	r24, 0x0d	; 13
 2b2:	8b 7f       	andi	r24, 0xFB	; 251
 2b4:	8d b9       	out	0x0d, r24	; 13
	//Clock Polarity (Leading Edge: Rising & Trailing Edge: Falling)
	clr_bit(SPCR , CPOL);
 2b6:	8d b1       	in	r24, 0x0d	; 13
 2b8:	87 7f       	andi	r24, 0xF7	; 247
 2ba:	8d b9       	out	0x0d, r24	; 13
	//Master Select
	clr_bit(SPCR , MSTR);
 2bc:	8d b1       	in	r24, 0x0d	; 13
 2be:	8f 7e       	andi	r24, 0xEF	; 239
 2c0:	8d b9       	out	0x0d, r24	; 13
	//Data Order (LSB of the data word is transmitted first)
	set_bit(SPCR , DORD);
 2c2:	8d b1       	in	r24, 0x0d	; 13
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	8d b9       	out	0x0d, r24	; 13
	//SPI Enable
	set_bit(SPCR , SPE);
 2c8:	8d b1       	in	r24, 0x0d	; 13
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	8d b9       	out	0x0d, r24	; 13
	//SPI Interrupt Enable
	set_bit(SPCR , SPIE);
 2ce:	8d b1       	in	r24, 0x0d	; 13
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	8d b9       	out	0x0d, r24	; 13
 2d4:	08 95       	ret

000002d6 <__vector_12>:
	#endif
}

ISR (SPI_STC_vect)
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	uint8_t data = SPDR;
 2f8:	8f b1       	in	r24, 0x0f	; 15
	switch (data)
 2fa:	82 33       	cpi	r24, 0x32	; 50
 2fc:	39 f0       	breq	.+14     	; 0x30c <__vector_12+0x36>
 2fe:	83 33       	cpi	r24, 0x33	; 51
 300:	41 f0       	breq	.+16     	; 0x312 <__vector_12+0x3c>
 302:	81 33       	cpi	r24, 0x31	; 49
 304:	51 f4       	brne	.+20     	; 0x31a <__vector_12+0x44>
	{
		//Toggle Led0
		case '1':
			LED_0_TGL();
 306:	0e 94 44 00 	call	0x88	; 0x88 <LED_0_TGL>
			break;
 30a:	07 c0       	rjmp	.+14     	; 0x31a <__vector_12+0x44>
		//Toggle Led2
		case '2':
			LED_2_TGL();
 30c:	0e 94 54 00 	call	0xa8	; 0xa8 <LED_2_TGL>
			break;
 310:	04 c0       	rjmp	.+8      	; 0x31a <__vector_12+0x44>
		case '3':
			LED_0_OFF();
 312:	0e 94 3f 00 	call	0x7e	; 0x7e <LED_0_OFF>
			LED_2_OFF();
 316:	0e 94 4f 00 	call	0x9e	; 0x9e <LED_2_OFF>
			break;
	}
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <SMART_ROOM_APP_Init>:
#include "LED_2.h"
#include "SPI.h"

void SMART_ROOM_APP_Init(void)
{
	LED_0_Init();
 33c:	0e 94 39 00 	call	0x72	; 0x72 <LED_0_Init>
	LED_2_Init();
 340:	0e 94 49 00 	call	0x92	; 0x92 <LED_2_Init>
	SPI_S_Init();
 344:	0e 94 3b 01 	call	0x276	; 0x276 <SPI_S_Init>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
